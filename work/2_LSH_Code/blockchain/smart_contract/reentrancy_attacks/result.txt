'solc --version' running
'solc ./VulnerableContract.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,C:\File\Â≤≠ÂçóÂ§ßÂ≠¶\Project\f42\work\2_LSH_Code\blockchain\smart_contract\reentrancy_attacks' running
INFO:Detectors:
Reentrancy in VulnerableContract.withdraw(uint256) (VulnerableContract.sol#11-18):
	External calls:
	- (success) = msg.sender.call{value: amount}() (VulnerableContract.sol#14)
	State variables written after the call(s):
	- balances[msg.sender] -= amount (VulnerableContract.sol#17)
	VulnerableContract.balances (VulnerableContract.sol#5) can be used in cross function reentrancies:
	- VulnerableContract.balances (VulnerableContract.sol#5)
	- VulnerableContract.deposit() (VulnerableContract.sol#7-9)
	- VulnerableContract.getBalance() (VulnerableContract.sol#20-22)
	- VulnerableContract.withdraw(uint256) (VulnerableContract.sol#11-18)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
Pragma version^0.8.0 (VulnerableContract.sol#2) allows old versions
solc-0.8.28 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in VulnerableContract.withdraw(uint256) (VulnerableContract.sol#11-18):
	- (success) = msg.sender.call{value: amount}() (VulnerableContract.sol#14)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Slither:./VulnerableContract.sol analyzed (1 contracts with 93 detectors), 4 result(s) found
[0m